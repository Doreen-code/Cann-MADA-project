---
title: "Tables and Figures Formatting for Manuscript"
author: "Natalie Cann"
date: "2025-04-4"
output: html_document
---

*IMPORTANT: OTHER FILES MUST BE RUN BEFORE THIS FILE IS RUN IN ORDER FOR REPRODUCIBILITY*
Run the project-eda.qmd file, then the project-analysis.qmd file, then the project-extra-analysis.qmd file, THEN this file can be run. 

This file contains the tables and figures for the manuscript. The tables and figures are taken from various other files (the file name will be specified) and are formatted according to the theme I would like to use for the manuscript.

Loading Packages:

```{r, load packages}
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
library(ggplot2) # for graphs
library(kableExtra) # for tables
library(naniar) # for missingness visualization (gg_miss_var)
library(readr) # for reading in csv files
library(purrr)
library(lubridate) # for dealing with dates
library(corrplot) # correlations
library(gt) # for tables
library(patchwork)
library(vars)
library(tidyverse)
library(tibble)
library(yardstick)
library(rsample)
library(tidymodels)
library(caret)
library(ranger)
library(gt)
library(knitr)
library(kableExtra)
library(gridExtra)
library(grid)
library(tidyr)
```

# EDA Tables and Figures (from 'project-eda.qmd')

## COVID-19 Vaccine

I will first load in the datasets I used for this file so that I can fix the tables and graphs.

```{r, load data}
# Covid vaccine datasets
covid_vaccine_2021 <- readRDS(here("data", "processed-data", "covid-vaccine-2021.rds"))
covid_vaccine_2022 <- readRDS(here("data", "processed-data", "covid-vaccine-2022.rds"))
covid_vaccine_2023 <- readRDS(here("data", "processed-data", "covid-vaccine-2023.rds"))

# Influenza vaccine datasets
flu_vaccine_2021 <- readRDS(here("data", "processed-data", "flu-vaccine-2021.rds"))
flu_vaccine_2022 <- readRDS(here("data", "processed-data", "flu-vaccine-2022.rds"))
flu_vaccine_2023 <- readRDS(here("data", "processed-data", "flu-vaccine-2023.rds"))
```

Covid Vaccine Doses Administered Table:

```{r}
# Summarize cumulative counts for each year
summary_2021_cov <- covid_vaccine_2021 %>%
  summarise(
    Year = 2021,
    Janssen = sum(Administered_Janssen, na.rm = TRUE),
    Moderna = sum(Administered_Moderna, na.rm = TRUE),
    Pfizer = sum(Administered_Pfizer, na.rm = TRUE),
    Novavax = sum(Administered_Novavax, na.rm = TRUE),
    Unknown_Manufacturer = sum(Administered_Unk_Manuf, na.rm = TRUE)
  )

summary_2022_cov <- covid_vaccine_2022 %>%
  summarise(
    Year = 2022,
    Janssen = sum(Administered_Janssen, na.rm = TRUE),
    Moderna = sum(Administered_Moderna, na.rm = TRUE),
    Pfizer = sum(Administered_Pfizer, na.rm = TRUE),
    Novavax = sum(Administered_Novavax, na.rm = TRUE),
    Unknown_Manufacturer = sum(Administered_Unk_Manuf, na.rm = TRUE)
  )

summary_2023_cov <- covid_vaccine_2023 %>%
  summarise(
    Year = 2023,
    Janssen = sum(Administered_Janssen, na.rm = TRUE),
    Moderna = sum(Administered_Moderna, na.rm = TRUE),
    Pfizer = sum(Administered_Pfizer, na.rm = TRUE),
    Novavax = sum(Administered_Novavax, na.rm = TRUE),
    Unknown_Manufacturer = sum(Administered_Unk_Manuf, na.rm = TRUE)
  )

# Combine summaries into a single table
cumulative_counts_covid <- bind_rows(summary_2021_cov, summary_2022_cov, summary_2023_cov)

# Display the table
print(cumulative_counts_covid)
```

```{r}
# Create gt table of cumulative covid vaccine counts 
# Convert the data to a gt table with desired formatting
cumulative_counts_covid_gt <- cumulative_counts_covid %>%
  gt() %>%
  tab_header(
    title = md("**Cumulative Counts of COVID-19 Vaccines Administered in 2021-2023**"),
    subtitle = md(" ")  # Adding an empty subtitle to create space for two rows
  ) %>%
  cols_label(
    Year = md("**Year**"),
    Janssen = md("**Janssen**"),
    Moderna = md("**Moderna**"),
    Pfizer = md("**Pfizer**"),
    Novavax = md("**Novavax**"),
    Unknown_Manufacturer = md("**Unknown Manufacturer**")
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "white"),
      cell_text(weight = "bold", color = "black", font = "Times New Roman")
    ),
    locations = cells_body(columns = "Year")
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),
    locations = cells_body(columns = c("Janssen", "Moderna", "Pfizer", "Novavax", "Unknown_Manufacturer"))
  ) %>%
  # Center-align the values in the vaccine columns
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_body(columns = c("Janssen", "Moderna", "Pfizer", "Novavax", "Unknown_Manufacturer"))
  ) %>%
  # Center-align the column names
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_column_labels(columns = c("Year", "Janssen", "Moderna", "Pfizer", "Novavax", "Unknown_Manufacturer"))
  ) %>%
  # Center-align the title and subtitle
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_title(groups = c("title", "subtitle"))
  ) %>%
  # Add footnote to the Novavax column
  tab_footnote(
    footnote = "Note: The Novavax vaccine has 0 reported doses administered in 2021 due to the fact that the vaccine was not accessible to the public until 2022.",
    locations = cells_column_labels(columns = "Novavax")
  ) %>%
  # Style the footnote text
  tab_style(
    style = cell_text(font = "Times New Roman"),
    locations = cells_footnotes()
  )

# Display the gt table
cumulative_counts_covid_gt
# Save the formatted gt table as PNG using here() to specify the path
gtsave(cumulative_counts_covid_gt, here("results", "tables", "cumul-covid-table.png"))

```

Covid Vaccine Doses Administered in 2021 by Manufacturer:

```{r, time series plot of doses administered in 2021, cumulative}
covid_vaccine_2021_long <- covid_vaccine_2021 %>%
  dplyr::select(Date, 
         Cumulative_Administered_Janssen, 
         Cumulative_Administered_Moderna, 
         Cumulative_Administered_Pfizer, 
         Cumulative_Administered_Unk_Manuf) %>%
  pivot_longer(cols = -Date, names_to = "Manufacturer", values_to = "Cumulative_Administered")

# Rename the factor levels for better readability
covid_vaccine_2021_long$Manufacturer <- factor(covid_vaccine_2021_long$Manufacturer,levels= c("Cumulative_Administered_Janssen", "Cumulative_Administered_Moderna", 
"Cumulative_Administered_Pfizer", "Cumulative_Administered_Unk_Manuf"),
labels = c("Janssen", "Moderna", "Pfizer", "Unknown Manufacturer"))

# Using log scale on y axis because of overlap in 2022 and 2023 graphs
ggplot(covid_vaccine_2021_long, aes(x = Date, y = Cumulative_Administered, color = Manufacturer)) +
  geom_line(size = 1) +
  scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
  scale_color_manual(values = c("Janssen" = "#FF928B", 
                                "Moderna" = "#FFAC81", 
                                "Pfizer" = "#ffd97d", 
                                "Novavax" = "#88d498", 
                                "Unknown Manufacturer" = "#99c1de")) +
  labs(title = "Cumulative COVID-19 Doses Administered in 2021 by \n Manufacturer on the Logarithmic Scale",
       x = "Date",
       y = "Cumulative Doses Administered (Log Scale)",
       color = "Vaccine Manufacturer") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        text = element_text(family = "Times New Roman"))
```

Covid Vaccine Doses Administered in 2022 by Manufacturer:

```{r, time series plot of doses administered in 2022, cumulative}
covid_vaccine_2022_long <- covid_vaccine_2022 %>%
  dplyr::select(Date, 
         Cumulative_Administered_Janssen, 
         Cumulative_Administered_Moderna, 
         Cumulative_Administered_Pfizer, 
         Cumulative_Administered_Novavax,
         Cumulative_Administered_Unk_Manuf) %>%
  pivot_longer(cols = -Date, names_to = "Manufacturer", values_to = "Cumulative_Administered")

# Rename the factor levels for better readability
covid_vaccine_2022_long$Manufacturer <- factor(covid_vaccine_2022_long$Manufacturer,levels= c("Cumulative_Administered_Janssen", "Cumulative_Administered_Moderna", 
"Cumulative_Administered_Pfizer", "Cumulative_Administered_Novavax", "Cumulative_Administered_Unk_Manuf"),
labels = c("Janssen", "Moderna", "Pfizer", "Novavax", "Unknown Manufacturer"))

# Using log scale on y axis because of overlap 
ggplot(covid_vaccine_2022_long, aes(x = Date, y = Cumulative_Administered, color = Manufacturer)) +
  geom_line(size = 1) +
  scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
  scale_color_manual(values = c("Janssen" = "#FF928B", 
                                "Moderna" = "#FFAC81", 
                                "Pfizer" = "#ffd97d", 
                                "Novavax" = "#88d498", 
                                "Unknown Manufacturer" = "#99c1de")) + 
  labs(title = "Cumulative COVID-19 Doses Administered in 2022 by \n Manufacturer on the Logarithmic Scale",
       x = "Date",
       y = "Cumulative Doses Administered (Log Scale)",
       color = "Vaccine Manufacturer") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        text = element_text(family = "Times New Roman"))
```

Covid Vaccine Doses Administered in 2023 by Manufacturer:

```{r,time series plot of doses administered in 2023, cumulative}
covid_vaccine_2023_long <- covid_vaccine_2023 %>%
  dplyr::select(Date, 
         Cumulative_Administered_Janssen, 
         Cumulative_Administered_Moderna, 
         Cumulative_Administered_Pfizer, 
         Cumulative_Administered_Novavax,
         Cumulative_Administered_Unk_Manuf) %>%
  pivot_longer(cols = -Date, names_to = "Manufacturer", values_to = "Cumulative_Administered")

# Rename the factor levels for better readability
covid_vaccine_2023_long$Manufacturer <- factor(covid_vaccine_2023_long$Manufacturer,levels= c("Cumulative_Administered_Janssen", "Cumulative_Administered_Moderna", 
"Cumulative_Administered_Pfizer", "Cumulative_Administered_Novavax", "Cumulative_Administered_Unk_Manuf"),
labels = c("Janssen", "Moderna", "Pfizer", "Novavax", "Unknown Manufacturer"))

# Using log scale on y axis because of overlap 
ggplot(covid_vaccine_2023_long, aes(x = Date, y = Cumulative_Administered, color = Manufacturer)) +
  geom_line(size = 1) +
  scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
  scale_color_manual(values = c("Janssen" = "#FF928B", 
                                "Moderna" = "#FFAC81", 
                                "Pfizer" = "#ffd97d", 
                                "Novavax" = "#88d498", 
                                "Unknown Manufacturer" = "#99c1de")) +
  labs(title = "Cumulative COVID-19 Doses \n Administered in 2023 by Manufacturer",
       x = "Date",
       y = "Cumulative Doses Administered (Log Scale)",
       color = "Vaccine Manufacturer") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        text = element_text(family = "Times New Roman"))
```

```{r}
# Combine the datasets for all years
covid_vaccine_combined <- bind_rows(
  covid_vaccine_2021_long %>% mutate(Year = "2021"),
  covid_vaccine_2022_long %>% mutate(Year = "2022"),
  covid_vaccine_2023_long %>% mutate(Year = "2023")
)

# Create the combined plot with shared axes and legend
combined_plot <- ggplot(covid_vaccine_combined, aes(x = Date, y = Cumulative_Administered, color = Manufacturer)) +
  geom_line(size = 1) +
  scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
  scale_color_manual(values = c("Janssen" = "#FF928B", 
                                "Moderna" = "#FFAC81", 
                                "Pfizer" = "#ffd97d", 
                                "Novavax" = "#88d498", 
                                "Unknown Manufacturer" = "#99c1de")) +
  labs(title = "Cumulative COVID-19 Doses Administered by \n Manufacturer on the Logarithmic Scale (2021-2023)",
       x = "Date",
       y = "Cumulative Doses Administered (Log Scale)",
       color = "Vaccine Manufacturer:") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        text = element_text(family = "Times New Roman"),
        legend.position = "bottom") +  # Move legend to the bottom
  facet_wrap(~ Year, ncol = 1)

# Print to view
combined_plot

# Save the plot
ggsave(here("results", "figures", "covid-combined-plot.png"), plot = combined_plot, width = 10, height = 15, dpi = 300)
```

Note: Pfizer and Moderna appear to be overlapping in the graph.

## Flu Vaccine

Flu Vaccine Doses Administered Table:

```{r}
# Summarize cumulative counts for each year
summary_2021_flu <- flu_vaccine_2021 %>%
  summarise(
    Year = 2021,
    Cumulative_Doses = sum(Cumulative_Flu_Doses_Distributed_Millions, na.rm = TRUE)
  )

summary_2022_flu <- flu_vaccine_2022 %>%
  summarise(
    Year = 2022,
    Cumulative_Doses = sum(Cumulative_Flu_Doses_Distributed_Millions, na.rm = TRUE)
  )

summary_2023_flu <- flu_vaccine_2023 %>%
  summarise(
    Year = 2023,
    Cumulative_Doses = sum(Cumulative_Flu_Doses_Distributed_Millions, na.rm = TRUE)
  )

# Combine summaries into a single table
cumulative_counts_flu <- bind_rows(summary_2021_flu, summary_2022_flu, summary_2023_flu)

# Display the table
print(cumulative_counts_flu)
```

```{r}
# Create gt table of cumulative flu vaccine counts 
# Convert the data to a gt table with desired formatting
cumulative_counts_flu_gt <- cumulative_counts_flu %>%
  gt() %>%
  tab_header(
    title = md("**Cumulative Counts of Influenza Vaccines Administered in 2021-2023**"),
    subtitle = md(" ")  # Adding an empty subtitle to create space for two rows
  ) %>%
  cols_label(
    Year = md("**Year**"),
    Cumulative_Doses = md("**Cumulative Doses**")
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "white"),
      cell_text(weight = "bold", color = "black", font = "Times New Roman")
    ),
    locations = cells_body(columns = "Year")
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),
    locations = cells_body(columns = "Cumulative_Doses")
  ) %>%
  # Center-align the values in the vaccine columns
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_body(columns = c("Year", "Cumulative_Doses"))
  ) %>%
  # Center-align the column names
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_column_labels(columns = c("Year", "Cumulative_Doses"))
  ) %>%
  # Center-align the title and subtitle
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_title(groups = c("title", "subtitle"))
  )

# Display the gt table
cumulative_counts_flu_gt

# Save the formatted gt table as PNG using here() to specify the path
gtsave(cumulative_counts_flu_gt, here("results", "tables", "cumul-flu-table.png"))

```

Influenza Vaccine Graph: 

```{r}
# Create an aesthetically pleasing time series plot for flu vaccines
flu_plot <- ggplot(flu_vaccine_all, aes(x = Week, y = Cumulative_Flu_Doses_Distributed_Millions, color = factor(Year), linetype = factor(Year))) +
  geom_line(size = 1.2) +  # Make lines thicker for better visibility
  scale_color_manual(values = c("2021" = "#FF928B", "2022" = "#88d498", "2023" = "#99c1de")) +  # Use specified colors for each year
  scale_linetype_manual(values = c("2021" = "solid", "2022" = "solid", "2023" = "solid")) +  # Match line types with the COVID graph
  labs(
    title = "Cumulative Flu Vaccine Doses Administered (2021-2023)",
    x = "Week",
    y = "Doses Administered (Millions)",
    color = "Year",
    linetype = "Year"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16, margin = margin(b = 10), family = "Times New Roman"),  # Adjust title position and font
    plot.caption = element_text(hjust = 0.5, size = 10, family = "Times New Roman"),  # Center caption and font
    axis.title = element_text(size = 12, family = "Times New Roman"),  # Increase axis title size and font
    axis.text = element_text(size = 10, family = "Times New Roman"),  # Increase axis text size and font
    legend.title = element_text(size = 12, family = "Times New Roman"),  # Increase legend title size and font
    legend.text = element_text(size = 10, family = "Times New Roman"),  # Increase legend text size and font
    legend.position = "bottom",  # Move legend to the bottom
    panel.grid.major = element_line(color = "gray", size = 0.5, linetype = "dotted"),  # Adjust gridlines
    panel.grid.minor = element_blank(),  # Hide minor gridlines
    plot.margin = margin(20, 20, 20, 20)  # Add margins for spacing
  )

# Print the plot to view
flu_plot

# Save the plot
ggsave(here("results", "figures", "flu-plot.png"), plot = flu_plot, width = 10, height = 5.625, dpi = 300)

```

# Analysis Tables and Figures (from 'project-analysis.qmd')

Loading in datasets: 

```{r}
# Covid vaccine datasets
covid_vaccine_2021 <- readRDS(here("data", "processed-data", "covid-vaccine-2021.rds"))
covid_vaccine_2022 <- readRDS(here("data", "processed-data", "covid-vaccine-2022.rds"))
covid_vaccine_2023 <- readRDS(here("data", "processed-data", "covid-vaccine-2023.rds"))

# Influenza vaccine datasets
flu_vaccine_2021 <- readRDS(here("data", "processed-data", "flu-vaccine-2021.rds"))
flu_vaccine_2022 <- readRDS(here("data", "processed-data", "flu-vaccine-2022.rds"))
flu_vaccine_2023 <- readRDS(here("data", "processed-data", "flu-vaccine-2023.rds"))
```

Linear Regression Summary Table: 

```{r}
library(gt)

# Extracting the summary of the linear regression model
model_summary <- summary(model)

# Get the coefficients (Manufacturer levels)
coefficients <- as.data.frame(model_summary$coefficients)

# Rename columns for better readability
colnames(coefficients) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")

# Add the Manufacturer names as a column
coefficients$Manufacturer <- rownames(coefficients)

# Change the row names to the desired names
coefficients$Manufacturer <- c("Intercept (Janssen)", "Moderna", "Pfizer", "Novavax", "Unknown Manufacturer")

# Reorder columns manually using base R
coefficients <- coefficients[, c("Manufacturer", "Estimate", "Std. Error", "t value", "Pr(>|t|)")]

# Round the p-values and add asterisks for significance
coefficients$`Pr(>|t|)` <- round(coefficients$`Pr(>|t|)`, 3)
coefficients$`Pr(>|t|)` <- ifelse(coefficients$`Pr(>|t|)` < 0.05, paste0(coefficients$`Pr(>|t|)`, "*"), coefficients$`Pr(>|t|)`)

# Create a gt table for the regression results
model_gt_table <- coefficients %>%
  gt() %>%
  tab_header(
    title = md("**Linear Regression Model: COVID-19 Vaccine Doses Administered by Manufacturer**"),
    subtitle = md(" ")  # Adding an empty subtitle to create space for two rows
  ) %>%
  cols_label(
    Manufacturer = md("**Manufacturer**"),
    Estimate = md("**Estimate**"),
    `Std. Error` = md("**Standard Error**"),
    `t value` = md("**t-Value**"),
    `Pr(>|t|)` = md("**P-Value**")
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "white"),
      cell_text(weight = "bold", color = "black", font = "Times New Roman")
    ),
    locations = cells_body(columns = "Manufacturer")
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),
    locations = cells_body(columns = c("Estimate", "Std. Error", "t value", "Pr(>|t|)"))
  ) %>%
  # Center-align the values in the columns
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_body(columns = c("Manufacturer", "Estimate", "Std. Error", "t value", "Pr(>|t|)"))
  ) %>%
  # Center-align the column names
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_column_labels(columns = c("Manufacturer", "Estimate", "Std. Error", "t value", "Pr(>|t|)"))
  ) %>%
  # Center-align the title and subtitle
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_title(groups = c("title", "subtitle"))
  ) %>%
  # Add footnote to the P-Value column
  tab_footnote(
    footnote = "Statistically significant p-values are marked with an asterisk (*).",
    locations = cells_column_labels(columns = "Pr(>|t|)")
  ) %>%
  # Style the footnote text
  tab_style(
    style = cell_text(font = "Times New Roman"),
    locations = cells_footnotes()
  )

# Display the table
model_gt_table

# Save the table as a PNG file
gtsave(model_gt_table, here("results", "tables", "covid-manuf-linear-reg.png"))

```
Granger Causality: 

```{r}
# Load needed packages 
library(vars)
library(tidyverse)

# Ensure both data sets cover the same period
combined_data <- merge(
  subset(covid_vaccine_all, select = c(Date, Administered)),
  subset(flu_vaccine_all, select = c(Start_Date, Flu_Doses_Administered_Weekly_Millions)),
  by.x = "Date", by.y = "Start_Date", all = FALSE
)

# Convert to time series
data_ts <- ts(
  combined_data[, c("Administered", "Flu_Doses_Administered_Weekly_Millions")],
  frequency = 52,
  start = c(as.numeric(format(min(combined_data$Date), "%Y")),
            as.numeric(format(min(combined_data$Date), "%U")))
)

# ADF test to ensure data if stationary 
library(tseries)

adf.test(data_ts[, "Administered"])
adf.test(data_ts[, "Flu_Doses_Administered_Weekly_Millions"])
data_ts_diff <- diff(data_ts)
adf.test(data_ts_diff[, "Flu_Doses_Administered_Weekly_Millions"])

# Determine the optimal lag length
lag_selection <- VARselect(data_ts, lag.max = 10, type = "const")
optimal_lag <- lag_selection$selection["AIC(n)"]

# Fit the VAR model
var_model <- VAR(data_ts_diff, p = optimal_lag, type = "const")

# Summarize the VAR model
summary(var_model)

# Compute impulse response functions
irf <- irf(var_model, impulse = "Administered", 
            response = "Flu_Doses_Administered_Weekly_Millions", 
            n.ahead = 10, boot = TRUE)

# Plot the impulse response functions
plot(irf)

# Forecast the next 10 periods
forecast <- predict(var_model, n.ahead = 10)

# Plot the forecast
plot(forecast)

# Granger causality test
granger_test <- causality(var_model, cause = "Administered")
print(granger_test)

```


```{r}
granger_test <- causality(var_model, cause = "Administered")

# Create the table data
granger_table <- data.frame(
  Metric = c("Null Hypothesis", "F Test Statistic", "d.f. 1", "d.f. 2", "P-Value"),
  Value = c(
    "Number of COVID-19 vaccine doses administered don't Granger-cause the number of Influenza vaccine doses administered",
    granger_test$Granger$statistic[1, 1],
    granger_test$Granger$parameter["df1"],
    granger_test$Granger$parameter["df2"],
    granger_test$Granger$p.value[1, 1]
  )
)

# Format with gt and apply consistent styling
granger_table_gt <- granger_table %>%
  gt() %>%
  tab_header(
    title = md("**Granger Causality Test Results**"),
    subtitle = md(" ")  # Adding an empty subtitle to create space for two rows
  ) %>%
  cols_label(
    Metric = md("**Metric**"),
    Value = md("**Value**")
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "white"),
      cell_text(weight = "bold", color = "black", font = "Times New Roman")
    ),
    locations = cells_body(columns = "Metric")
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),
    locations = cells_body(columns = "Value")
  ) %>%
  # Center-align the values in the columns
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_body(columns = c("Metric", "Value"))
  ) %>%
  # Center-align the column names
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_column_labels(columns = c("Metric", "Value"))
  ) %>%
  # Center-align the title and subtitle
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_title(groups = c("title", "subtitle"))
  ) %>%
  # Wrap text in the Value column
  text_transform(
    locations = cells_body(columns = "Value"),
    fn = function(x) {
      str_wrap(x, width = 50)
    }
  )

# Display the table
granger_table_gt

# Save the formatted gt table 
gtsave(granger_table_gt, here("results", "tables", "granger-test-table.png"))

```

CCF: 

```{r}
# Specify the file path using the here package and open the PNG device
png(here::here("results", "figures", "ccf-manuscript.png"), width = 800, height = 600)

# Generate the cross-correlation plot with the custom title and y-axis label
ccf_plot <- ccf(covid_vaccine_combined$Cumulative_Administered, 
                flu_vaccine_all$Cumulative_Flu_Doses_Distributed_Millions, 
                lag.max = 12, 
                plot = FALSE)

# Create a data frame from the ccf results
ccf_data <- data.frame(
  Lag = ccf_plot$lag,
  ACF = ccf_plot$acf
)

# Plot using ggplot2 with custom styling
ggplot(ccf_data, aes(x = Lag, y = ACF)) +
  geom_bar(stat = "identity", fill = "#99c1de") +
  geom_hline(yintercept = c(-0.2, 0.2), linetype = "dashed", color = "#FFAC81") +
  theme_minimal(base_family = "Times New Roman") +
  labs(
    title = "Cross-Correlation Function between Covid-19 \n Vaccination and Influenza Vaccination",
    y = "Autocorrelation Function (ACF)",
    x = "Lag"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  )

# Close the device to save the plot
dev.off()

# Display the saved plot
# Generate the cross-correlation plot with the custom title and y-axis label
ccf_plot <- ccf(covid_vaccine_combined$Cumulative_Administered, 
                flu_vaccine_all$Cumulative_Flu_Doses_Distributed_Millions, 
                lag.max = 12, 
                plot = FALSE)

# Create a data frame from the ccf results
ccf_data <- data.frame(
  Lag = ccf_plot$lag,
  ACF = ccf_plot$acf
)

# Plot using ggplot2 with custom styling
ggplot(ccf_data, aes(x = Lag, y = ACF)) +
  geom_bar(stat = "identity", fill = "#99c1de") +
  geom_hline(yintercept = c(-0.2, 0.2), linetype = "dashed", color = "#FFAC81") +
  theme_minimal(base_family = "Times New Roman") +
  labs(
    title = "Cross-Correlation Function between Covid-19 \n Vaccination and Influenza Vaccination",
    y = "Autocorrelation Function (ACF)",
    x = "Lag"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  )
```

# Extra Analysis Tables and Figures (from 'project-extra-analysis.qmd')

Load in data: 

```{r, load data}
# Covid vaccine datasets
covid_vaccine_2021 <- readRDS(here("data", "processed-data", "covid-vaccine-2021.rds"))
covid_vaccine_2022 <- readRDS(here("data", "processed-data", "covid-vaccine-2022.rds"))
covid_vaccine_2023 <- readRDS(here("data", "processed-data", "covid-vaccine-2023.rds"))

# Influenza vaccine datasets
flu_vaccine_2021 <- readRDS(here("data", "processed-data", "flu-vaccine-2021.rds"))
flu_vaccine_2022 <- readRDS(here("data", "processed-data", "flu-vaccine-2022.rds"))
flu_vaccine_2023 <- readRDS(here("data", "processed-data", "flu-vaccine-2023.rds"))
```

```{r}
# Covid-19 Vaccine Combined
covid_vaccine_combined <- bind_rows(
  covid_vaccine_2021 %>% mutate(Year = 2021),
  covid_vaccine_2022 %>% mutate(Year = 2022),
  covid_vaccine_2023 %>% mutate(Year = 2023)
) %>%
  arrange(Date)  # Ensure chronological order

# Flu Vaccine Combined
flu_vaccine_combined <- bind_rows(
  flu_vaccine_2021 %>% mutate(Year = 2021),
  flu_vaccine_2022 %>% mutate(Year = 2022),
  flu_vaccine_2023 %>% mutate(Year = 2023)
) %>%
  arrange(Start_Date)  # Ensure chronological order
```

Table with results from different ML models for COVID-19 Vaccine data:

```{r}
# Create a dataframe with model names and metrics
model_comparison <- data.frame(
  Model = c("Linear Regression", "Cross-Validated Linear Regression", "LASSO Regression", "Random Forest"),
  RMSE = c(143707237506, 1.915258e-07, 1314505, 8550305),
  R_Squared = c(1, 1, 0.9999938, 0.9919158) 
)

# Format with gt and apply consistent styling
model_comparison_gt <- model_comparison %>%
  gt() %>%
  tab_header(
    title = md("**Model Comparison**"),
    subtitle = md(" ")  # Adding an empty subtitle to create space for two rows
  ) %>%
  cols_label(
    Model = md("**Model Name**"),
    RMSE = md("**Root Mean Squared Error**"),
    R_Squared = md("**R-Squared**")
  ) %>%
  tab_spanner(
    label = md("**Metrics**"),
    columns = vars(RMSE, R_Squared)
  ) %>%
  fmt_number(
    columns = vars(RMSE),
    decimals = 2
  ) %>%
  fmt_number(
    columns = vars(R_Squared),
    decimals = 5
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "white"),
      cell_text(weight = "bold", color = "black", font = "Times New Roman")
    ),
    locations = cells_body(columns = "Model")
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),
    locations = cells_body(columns = c("RMSE", "R_Squared"))
  ) %>%
  # Center-align the values in the columns
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_body(columns = c("Model", "RMSE", "R_Squared"))
  ) %>%
  # Center-align the column names
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_column_labels(columns = c("Model", "RMSE", "R_Squared"))
  ) %>%
  # Center-align the title and subtitle
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_title(groups = c("title", "subtitle"))
  ) %>%
  # Center-align the spanner label
  tab_style(
    style = cell_text(align = "center", font = "Times New Roman"),
    locations = cells_column_spanners()
  )

# Display the table
model_comparison_gt

# Save the formatted gt table 
gtsave(model_comparison_gt, here("results", "tables", "model-comparison-table.png"))

```

Running Models here so I can fix the format for the figure below:

```{r}
# set seed for reproducibility
set.seed(123)

# COVID-19 VAX DATA
split_index_covid <- floor(0.75 * nrow(covid_vaccine_combined))  # 75% cutoff

covid_train <- covid_vaccine_combined[1:split_index_covid, ]  # Training set (older data)
covid_test <- covid_vaccine_combined[(split_index_covid + 1):nrow(covid_vaccine_combined), ]  # Test set (newer data)

# FLU VAX DATA
split_index_flu <- floor(0.75 * nrow(flu_vaccine_combined))  # 75% cutoff

flu_train <- flu_vaccine_combined[1:split_index_flu, ]  # Training set (older data)
flu_test <- flu_vaccine_combined[(split_index_flu + 1):nrow(flu_vaccine_combined), ]  # Test set (newer data)

## ENSURING SPLIT OCCURRED CORRECTLY
# Ensure the Date column is in Date format if not already
covid_vaccine_combined$Date <- as.Date(covid_vaccine_combined$Date)

# Add a column to indicate whether the row is part of the training or test set
covid_vaccine_combined$set <- ifelse(covid_vaccine_combined$Date <= covid_vaccine_combined$Date[split_index_covid], "Train", "Test")

# Plot the distribution of dates for both train and test sets
ggplot(covid_vaccine_combined, aes(x = Date, color = set)) +
  geom_histogram(data = covid_vaccine_combined, aes(x = Date, fill = set), bins = 50, position = "identity", alpha = 0.5) +
  labs(title = "Visualization of Train-Test Split",
       x = "Date",
       y = "Count of Data Points") +
  theme_minimal() +
  scale_color_manual(values = c("Train" = "blue", "Test" = "red")) +
  scale_fill_manual(values = c("Train" = "blue", "Test" = "red"))

```

```{r}
# convert Date to numeric for regression
covid_train$Date_numeric <- as.numeric(covid_train$Date)
covid_test$Date_numeric <- as.numeric(covid_test$Date)

# fit the linear reg model to the train data
covid_lm <- lm(Administered ~ Administered_Janssen + Administered_Moderna + Administered_Pfizer + Administered_Novavax + Administered_Unk_Manuf, data = covid_train)

# summary of linear reg model
summary(covid_lm)

# predict on test data
covid_predictions <- predict(covid_lm, newdata = covid_test)

# create tibble for RMSE calculation
covid_results_lr <- tibble(
  truth = covid_test$Cumulative_Administered,
  estimate = covid_predictions
)

# RMSE
rmse(covid_results_lr, truth, estimate)

# Plot observed vs predicted values
ggplot(covid_results_lr, aes(x = truth, y = estimate)) +
  geom_point(alpha = 0.6, color = "lightgreen") +
  geom_abline(slope = 1, intercept = 0, color = "gray") +
  labs(title = "Linear Regression: Observed vs Predicted COVID-19 \n Vaccine Administration", 
      x = "Observed Administered", 
      y = "Predicted Administered") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16)
  ) 
```

```{r}
# Set up cross-validation
cv_model <- train(Administered ~ Administered_Janssen + Administered_Moderna + Administered_Pfizer + Administered_Novavax + Administered_Unk_Manuf, 
                  data = covid_train, 
                  method = "lm", 
                  trControl = trainControl(method = "cv", number = 10))

# View RMSE from cross-validation
print(cv_model)

# Check for missing values in covid_test
sum(is.na(covid_test)) 

# Remove rows with missing values in covid_test
covid_test_clean <- covid_test %>% drop_na() # 382 NAs --> drop the NAs

# Make predictions on the cleaned test data
predictions <- predict(cv_model, newdata = covid_test_clean)

# Ensure the number of rows match
if (nrow(covid_test_clean) == length(predictions)) {
  covid_test_clean$predicted <- predictions
} else {
  stop("Mismatch in the number of rows between test data and predictions.")
}

# Create a tibble for observed and predicted values
covid_results_cv <- tibble(
  truth = covid_test_clean$Administered,
  estimate = covid_test_clean$predicted
)

# Plot observed vs predicted values
ggplot(covid_results_cv, aes(x = truth, y = estimate)) +
  geom_point(alpha = 0.6, color = "lightpink") +
  geom_abline(slope = 1, intercept = 0, color = "gray") +
  labs(title = "Cross-Validated Linear Regression: Observed vs Predicted \n COVID-19 Vaccine Administration",
       x = "Observed Administered",
       y = "Predicted Administered") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16)
  )
```

```{r}
# Try using Lasso Regression (L1 regularization)
cv_model_lasso <- train(Administered ~ Administered_Janssen + Administered_Moderna + Administered_Pfizer + Administered_Novavax + Administered_Unk_Manuf, 
                        data = covid_train, 
                        method = "glmnet", 
                        trControl = trainControl(method = "cv", number = 10))

# View RMSE from cross-validation
print(cv_model_lasso)

# Check for missing values in covid_test
sum(is.na(covid_test)) 

# Remove rows with missing values in covid_test
covid_test_clean <- covid_test %>% drop_na() # because we have 382 NAs

# Make predictions on the cleaned test data
predictions <- predict(cv_model_lasso, newdata = covid_test_clean)

# Ensure the number of rows match
if (nrow(covid_test_clean) == length(predictions)) {
  covid_test_clean$predicted <- predictions
} else {
  stop("Mismatch in the number of rows between test data and predictions.")
}

# Create a tibble for observed and predicted values
covid_results_lasso <- tibble(
  truth = covid_test_clean$Administered,
  estimate = covid_test_clean$predicted
)

# Plot observed vs predicted values
ggplot(covid_results_lasso, aes(x = truth, y = estimate)) +
  geom_point(alpha = 0.6, color = "#ffc34d") +
  geom_abline(slope = 1, intercept = 0, color = "gray") +
  labs(title = "LASSO Regression: Observed vs Predicted COVID-19 \n Vaccine Administration",
       x = "Observed Administered",
       y = "Predicted Administered") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16)
  )
```

```{r}
# Define the RF model (set seed in engine for reproducibility)
rf_model <- rand_forest() %>%
  set_engine("ranger", seed = 1234) %>%
  set_mode("regression")

# Define the recipe (preprocessing steps)
rf_recipe <- recipe(Administered ~ Administered_Janssen + Administered_Moderna + 
                                Administered_Pfizer + Administered_Novavax + 
                                Administered_Unk_Manuf + Year, 
                    data = covid_train)

# Create a workflow (model + recipe)
rf_workflow <- workflow() %>%
  add_model(rf_model) %>%
  add_recipe(rf_recipe)

# Fit the model on the training data
rf_fit <- rf_workflow %>%
  fit(data = covid_train)

# Predict on the test dataset
rf_predictions <- predict(rf_fit, covid_test) %>%
  bind_cols(covid_test)

# Calculate RMSE
rf_rmse <- rf_predictions %>%
  rmse(truth = Administered, estimate = .pred)

rf_rmse

# Calculate R-squared
rf_r_squared <- rf_predictions %>%
  rsq(truth = Administered, estimate = .pred)

rf_r_squared

# Plot observed vs predicted values
ggplot(rf_predictions, aes(x = Administered, y = .pred)) +
  geom_point(alpha = 0.6, color = "skyblue") +
  geom_abline(slope = 1, intercept = 0, color = "gray") +
  labs(title = "Random Forest: Observed vs Predicted COVID-19 \n Vaccine Administration", 
      x = "Observed Administered", 
      y = "Predicted Administered") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16)
  )
```

Figure of Observed vs Predicted Plots for the different ML models: 



```{r}
# Create a list of plots
graph_list <- list(
  ggplot(covid_results_lr, aes(x = truth, y = estimate)) +
    geom_point(alpha = 0.6, color = "#FF928B") +
    geom_abline(slope = 1, intercept = 0, color = "gray") +
    labs(title = "Linear Regression", x = "Observed", y = "Predicted") +
    theme_minimal() +
    theme(
      text = element_text(family = "Times New Roman", face = "bold"),
      plot.title = element_text(hjust = 0.5)
    ),
  
  ggplot(covid_results_cv, aes(x = truth, y = estimate)) +
    geom_point(alpha = 0.6, color = "#ffd97d") +
    geom_abline(slope = 1, intercept = 0, color = "gray") +
    labs(title = "Cross-Validated Linear Regression", x = "Observed", y = "Predicted") +
    theme_minimal() +
    theme(
      text = element_text(family = "Times New Roman", face = "bold"),
      plot.title = element_text(hjust = 0.5)
    ),
  
  ggplot(covid_results_lasso, aes(x = truth, y = estimate)) +
    geom_point(alpha = 0.6, color = "#88d498") +
    geom_abline(slope = 1, intercept = 0, color = "gray") +
    labs(title = "LASSO Regression", x = "Observed", y = "Predicted") +
    theme_minimal() +
    theme(
      text = element_text(family = "Times New Roman", face = "bold"),
      plot.title = element_text(hjust = 0.5)
    ),
  
  ggplot(rf_predictions, aes(x = Administered, y = .pred)) +
    geom_point(alpha = 0.6, color = "#99c1de") +
    geom_abline(slope = 1, intercept = 0, color = "gray") +
    labs(title = "Random Forest", x = "Observed", y = "Predicted") +
    theme_minimal() +
    theme(
      text = element_text(family = "Times New Roman", face = "bold"),
      plot.title = element_text(hjust = 0.5)
    )
)

# Combine the plots into one grid with an overall title
combined_plot <- grid.arrange(
  grobs = graph_list,
  ncol = 2,
  top = textGrob("Comparison of Models: Observed vs. Predicted", gp = gpar(fontfamily = "Times New Roman", fontface = "bold", fontsize = 20))
)

# Save the combined plot
ggsave(here("results", "figures", "model-comparison-plot.png"), plot = combined_plot, width = 10, height = 5.625, dpi = 300)
```





